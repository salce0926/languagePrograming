error3/rule2.mpl
program name ; begin a := b end.
 in line 1, ERROR: this variable name is undifined

error3/rule3.mpl
program name ; begin call a end.
 in line 1, ERROR: this procedure is not found

error3/rule7.mpl
program name ; var a, a : integer; begin end.
 in line 1, ERROR: this ID already exists in same scope

error3/rule10.mpl
program name ; var a : array [0] of integer; begin end.
 in line 1, ERROR: the length of array must be greater than or equal to 1

error3/rule13.mpl
program name ; procedure a; begin call a end; begin end.
 in line 1, ERROR: recursive calls are not allowed

error3/rule15.mpl
program name ; procedure a; begin call b end; begin end.
 in line 1, ERROR: this procedure is not found

error3/rule16pp.mpl
program name ; procedure a; begin end; procedure a; begin end; begin end.
 in line 1, ERROR: this ID already exists in same scope

error3/rule16pv.mpl
program name ; procedure a; begin end; var a : integer; begin end.
 in line 1, ERROR: this ID already exists in same scope

error3/rule16vp.mpl
program name ; var a : integer; procedure a; begin end; begin end.
 in line 1, ERROR: this ID already exists in same scope

error3/rule16vvg.mpl
program name ; var a : integer; var a : integer; begin end.
 in line 1, ERROR: this ID already exists in same scope

error3/rule16vvl.mpl
program name ; procedure a ( a : integer; a : integer ); begin end; begin end.
 in line 1, ERROR: this ID already exists in same scope

error3/rule18.mpl
program name ; procedure a (a : array [1] of integer); begin end; begin end.
 in line 1, ERROR: Standard type is not found
error3/rule20.mpl
program name ; begin if 0 then end.
 in line 1, ERROR: the type of expressions must be boolean
error3/rule21.mpl
program name ; begin while 0 do end.
 in line 1, ERROR: the type of expressions must be boolean
error3/rule22.mpl
program name ; begin call a end.
 in line 1, ERROR: this procedure is not found

error3/rule23.mpl
program name ; procedure a; begin end; var b : integer; begin call a(b) end.
 in line 1, ERROR: the number of the argument does not match the number of the parameter

error3/rule25.mpl
program name ; procedure a(b : integer; c : char); begin end; var b : char; c : integer; begin call a(b, c) end.
 in line 1, ERROR: the type of the argument does not match the difinition of the parameter

error3/rule26a.mpl
program name ; var a : char; b : array [1] of char; begin a := b end.
 in line 1, ERROR: the type of operand does not match

error3/rule26s.mpl
program name ; var a : char; begin a := 0 end.
 in line 1, ERROR: the type of operand does not match

error3/rule28a.mpl
program name ; var a : integer; begin a[0] := 0 end.
 in line 1, ERROR: the type of this id must be array

error3/rule28s.mpl
program name ; var a : array [1] of integer; begin a[true] := 0 end.
 in line 1, ERROR: the type of index must be integer

error3/rule32.mpl
program name ; begin if true > 0 then end.
 in line 1, ERROR: the type of operand does not match

error3/rule34.mpl
program name ; begin if -true then end.
 in line 1, ERROR: the type of operand does not match

error3/rule35m.mpl
program name ; begin if false - true then end.
 in line 1, ERROR: unsupported operand type for '-'

error3/rule35p.mpl
program name ; begin if false + true then end.
 in line 1, ERROR: unsupported operand type for '+'

error3/rule36.mpl
program name ; begin if 0 or 1 then end.
 in line 1, ERROR: unsupported operand type for 'or'

error3/rule38d.mpl
program name ; begin if false div true then end.
 in line 1, ERROR: unsupported operand type for 'div'

error3/rule38s.mpl
program name ; begin if false * true then end.
 in line 1, ERROR: unsupported operand type for '*'

error3/rule39.mpl
program name ; begin if 0 and 1 then end.
 in line 1, ERROR: unsupported operand type for 'and'

error3/rule42.mpl
program name ; begin if not 0 then end.
 in line 1, ERROR: unsupported operand type for 'not'

error3/rule44.mpl
program name ; var a : array [1] of integer; begin if boolean(a) then end.
 in line 1, ERROR: using array type as standard type is not allowed

error3/rule46.mpl
program name ; begin if boolean('aa') then end.
 in line 1, ERROR: the length of the string must be 1

error3/rule47.mpl
program name ; var a : boolean; begin read(a) end.
 in line 1, ERROR: the type of variable must be integer or char

error3/rule48.mpl
program name ; var a : array [1] of boolean; begin write(a) end.
 in line 1, ERROR: using array type as output format is not allowed

