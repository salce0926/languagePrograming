$$sample33p	START
	LAD  	gr0,	0
	CALL 	L0001
	CALL 	FLUSH
	SVC  	0
	JUMP 	L0002
$a	DC	0
L0002
	JUMP 	L0003
$x	DC	0
L0003
$p
	POP  	gr2
	JUMP 	L0004
$a%p	DC	0
L0004
	POP  	gr1
	ST   	gr1,	$a%p
	PUSH 	0,gr2
	LAD  	gr1,	$x
	PUSH 	0,gr1
	POP  	gr1
	CALL 	READINT
	CALL 	READLINE
	JUMP 	L0006
L0005	DC	'proc of p'
L0006
	LAD  	gr1,	L0005
	LD   	gr2,	gr0
	CALL 	WRITESTR
	LAD  	gr1,	$x
	PUSH 	0,gr1
	POP  	gr1
	LD   	gr1,	0,gr1
	LD   	gr2,	gr0
	CALL 	WRITEINT
	CALL 	WRITELINE
	LAD  	gr1,	$x
	PUSH 	0,gr1
	LAD  	gr1,	1
	PUSH 	0,gr1
	POP  	gr2
	POP  	gr1
	LD   	gr1,	0,gr1
	CPA  	gr1,	gr2
	JZE  	L0007
	LD   	gr1,	gr0
	JUMP 	L0008
L0007
	LAD  	gr1,	1
L0008
	PUSH 	0,gr1
	POP  	gr1
	CPA  	gr1,	gr0
	JZE  	L0009
	LD   	gr1,	$a%p
	PUSH 	0,gr1
	LAD  	gr1,	97
	PUSH 	0,gr1
	POP  	gr1
	POP  	gr2
	ST   	gr1,	0,gr2
	JUMP 	L0010
L0009
L0010
	LAD  	gr1,	$x
	PUSH 	0,gr1
	LAD  	gr1,	2
	PUSH 	0,gr1
	POP  	gr2
	POP  	gr1
	LD   	gr1,	0,gr1
	CPA  	gr1,	gr2
	JPL  	L0011
	LD   	gr1,	gr0
	JUMP 	L0012
L0011
	LAD  	gr1,	1
L0012
	PUSH 	0,gr1
	POP  	gr1
	CPA  	gr1,	gr0
	JZE  	L0013
	LD   	gr1,	$a%p
	PUSH 	0,gr1
	LAD  	gr1,	98
	PUSH 	0,gr1
	POP  	gr1
	POP  	gr2
	ST   	gr1,	0,gr2
	JUMP 	L0014
L0013
	LD   	gr1,	$a%p
	PUSH 	0,gr1
	LAD  	gr1,	99
	PUSH 	0,gr1
	POP  	gr1
	POP  	gr2
	ST   	gr1,	0,gr2
L0014
L0015
	LAD  	gr1,	$x
	PUSH 	0,gr1
	LAD  	gr1,	0
	PUSH 	0,gr1
	POP  	gr2
	POP  	gr1
	LD   	gr1,	0,gr1
	CPA  	gr1,	gr2
	JPL  	L0016
	LD   	gr1,	gr0
	JUMP 	L0017
L0016
	LAD  	gr1,	1
L0017
	PUSH 	0,gr1
	POP  	gr1
	CPA  	gr1,	gr0
	JZE  	L0018
	LAD  	gr1,	$x
	PUSH 	0,gr1
	LAD  	gr1,	$x
	PUSH 	0,gr1
	LAD  	gr1,	1
	PUSH 	0,gr1
	POP  	gr2
	POP  	gr1
	LD   	gr1,	0,gr1
	SUBA 	gr1,	gr2
	JOV  	EOVF
	PUSH 	0,gr1
	POP  	gr1
	POP  	gr2
	ST   	gr1,	0,gr2
	JUMP 	L0015
L0018
	RET  
	JUMP 	L0019
$b	DC	0
L0019
$q
	POP  	gr2
	JUMP 	L0020
$b%q	DC	0
L0020
	POP  	gr1
	ST   	gr1,	$b%q
	JUMP 	L0021
$a%q	DC	0
L0021
	JUMP 	L0022
$q%q	DC	0
L0022
	PUSH 	0,gr2
	JUMP 	L0024
L0023	DC	'proc of q'
L0024
	LAD  	gr1,	L0023
	LD   	gr2,	gr0
	CALL 	WRITESTR
	CALL 	WRITELINE
	LAD  	gr1,	$q%q
	PUSH 	0,gr1
	POP  	gr1
	CALL 	READINT
	CALL 	READLINE
	LAD  	gr1,	$a%q
	PUSH 	0,gr1
	LD   	gr1,	$b%q
	PUSH 	0,gr1
	LAD  	gr1,	$q%q
	PUSH 	0,gr1
	POP  	gr2
	LD   	gr2,	0,gr2
	POP  	gr1
	LD   	gr1,	0,gr1
	CPA  	gr1,	gr2
	JZE  	L0025
	LD   	gr1,	gr0
	JUMP 	L0026
L0025
	LAD  	gr1,	1
L0026
	PUSH 	0,gr1
	POP  	gr1
	POP  	gr2
	ST   	gr1,	0,gr2
	LAD  	gr1,	$a%q
	PUSH 	0,gr1
	POP  	gr1
	LD   	gr1,	0,gr1
	CPA  	gr1,	gr0
	JZE  	L0027
	JUMP 	L0029
L0028	DC	'true'
L0029
	LAD  	gr1,	L0028
	LD   	gr2,	gr0
	CALL 	WRITESTR
	CALL 	WRITELINE
	JUMP 	L0030
L0027
	JUMP 	L0032
L0031	DC	'false'
L0032
	LAD  	gr1,	L0031
	LD   	gr2,	gr0
	CALL 	WRITESTR
	CALL 	WRITELINE
L0030
	RET  
	JUMP 	L0033
$c	DC	0
L0033
L0001
	LAD  	gr1,	$a
	PUSH 	0,gr1
	LAD  	gr1,	1
	PUSH 	0,gr1
	POP  	gr1
	POP  	gr2
	ST   	gr1,	0,gr2
	LAD  	gr1,	$b
	PUSH 	0,gr1
	LAD  	gr1,	98
	PUSH 	0,gr1
	POP  	gr1
	POP  	gr2
	ST   	gr1,	0,gr2
	LAD  	gr1,	$b
	PUSH 	0,gr1
	POP  	gr1
	PUSH 	0,gr1
	CALL 	$p
	LAD  	gr1,	$a
	PUSH 	0,gr1
	POP  	gr1
	PUSH 	0,gr1
	CALL 	$q
	RET  
EOVF
	CALL WRITELINE
	LAD gr1, EOVF1
	LD gr2, gr0
	CALL WRITESTR
	CALL WRITELINE
	SVC 1 ; overflow error stop
EOVF1 DC '***** Run-Time Error : Overflow *****'
E0DIV
	JNZ EOVF
	CALL WRITELINE
	LAD gr1, E0DIV1
	LD gr2, gr0
	CALL WRITESTR
	CALL WRITELINE
	SVC 2 ; 0-divide error stop
E0DIV1 DC '***** Run-Time Error : Zero-Divide *****'
EROV
	CALL WRITELINE
	LAD gr1, EROV1
	LD gr2, gr0
	CALL WRITESTR
	CALL WRITELINE
	SVC 3 ; range-over error stop
EROV1 DC '***** Run-Time Error : Range-Over in Array Index *****'
WRITECHAR
; gr1 の値（文字）を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	LD gr6, SPACE
	LD gr7, OBUFSIZE
WC1
	SUBA gr2, ONE ; while(--c > 0) {
	JZE WC2
	JMI WC2
	ST gr6, OBUF,gr7 ; *p++ = ' ';
	CALL BOVFCHECK
	JUMP WC1 ; }
WC2
	ST gr1, OBUF,gr7 ; *p++ = gr1;
	CALL BOVFCHECK
	ST gr7, OBUFSIZE
	RPOP
	RET
WRITESTR
; gr1 が指す文字列を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	LD gr6, gr1 ; p = gr1;
WS1
	LD gr4, 0,gr6 ; while(*p != '¥0') {
	JZE WS2
	ADDA gr6, ONE ; p++;
	SUBA gr2, ONE ; c--;
	JUMP WS1 ; }
WS2
	LD gr7, OBUFSIZE ; q = OBUFSIZE;
	LD gr5, SPACE
WS3
	SUBA gr2, ONE ; while(--c >= 0) {
	JMI WS4
	ST gr5, OBUF,gr7 ; *q++ = ' ';
	CALL BOVFCHECK
	JUMP WS3 ; }
WS4
	LD gr4, 0,gr1 ; while(*gr1 != '¥0') {
	JZE WS5
	ST gr4, OBUF,gr7 ; *q++ = *gr1++;
	ADDA gr1, ONE
	CALL BOVFCHECK
	JUMP WS4 ; }
WS5
	ST gr7, OBUFSIZE ; OBUFSIZE = q;
	RPOP
	RET
BOVFCHECK
	ADDA gr7, ONE
	CPA gr7, BOVFLEVEL
	JMI BOVF1
	CALL WRITELINE
	LD gr7, OBUFSIZE
BOVF1
	RET
BOVFLEVEL DC 256
WRITEINT
; gr1 の値（整数）を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	LD gr7, gr0 ; flag = 0;
	CPA gr1, gr0 ; if(gr1>=0) goto WI1;
	JPL WI1
	JZE WI1
	LD gr4, gr0 ; gr1= - gr1;
	SUBA gr4, gr1
	CPA gr4, gr1
	JZE WI6
	LD gr1, gr4
	LD gr7, ONE ; flag = 1;
WI1
	LD gr6, SIX ; p = INTBUF+6;
	ST gr0, INTBUF,gr6 ; *p = '¥0';
	SUBA gr6, ONE ; p--;
	CPA gr1, gr0 ; if(gr1 == 0)
	JNZ WI2
	LD gr4, ZERO ; *p = '0';
	ST gr4, INTBUF,gr6
	JUMP WI5 ; }
WI2 ; else {
	CPA gr1, gr0 ; while(gr1 != 0) {
	JZE WI3
	LD gr5, gr1 ; gr5 = gr1 - (gr1 / 10) * 10;
	DIVA gr1, TEN ; gr1 /= 10;
	LD gr4, gr1
	MULA gr4, TEN
	SUBA gr5, gr4
	ADDA gr5, ZERO ; gr5 += '0';
	ST gr5, INTBUF,gr6 ; *p = gr5;
	SUBA gr6, ONE ; p--;
	JUMP WI2 ; }
WI3
	CPA gr7, gr0 ; if(flag != 0) {
	JZE WI4
	LD gr4, MINUS ; *p = '-';
	ST gr4, INTBUF,gr6
	JUMP WI5 ; }
WI4
	ADDA gr6, ONE ; else p++;
; }
WI5
	LAD gr1, INTBUF,gr6 ; gr1 = p;
	CALL WRITESTR ; WRITESTR();
	RPOP
	RET
WI6
	LAD gr1, MMINT
	CALL WRITESTR ; WRITESTR();
	RPOP
	RET
MMINT DC '-32768'
WRITEBOOL
; gr1 の値（真理値）が 0 なら'FALSE'を
; 0 以外なら'TRUE'を gr2 のけた数で出力する．
; gr2 が 0 なら必要最小限の桁数で出力する
	RPUSH
	CPA gr1, gr0 ; if(gr1 != 0)
	JZE WB1
	LAD gr1, WBTRUE ; gr1 = "TRUE";
	JUMP WB2
WB1 ; else
	LAD gr1, WBFALSE ; gr1 = "FALSE";
WB2
	CALL WRITESTR ; WRITESTR();
	RPOP
	RET
WBTRUE DC 'TRUE'
WBFALSE DC 'FALSE'
WRITELINE
; 改行を出力する
	RPUSH
	LD gr7, OBUFSIZE
	LD gr6, NEWLINE
	ST gr6, OBUF,gr7
	ADDA gr7, ONE
	ST gr7, OBUFSIZE
	OUT OBUF, OBUFSIZE
	ST gr0, OBUFSIZE
	RPOP
	RET
FLUSH
	RPUSH
	LD gr7, OBUFSIZE
	JZE FL1
	CALL WRITELINE
FL1
	RPOP
	RET
READCHAR
; gr1 が指す番地に文字一つを読み込む
	RPUSH
	LD gr5, RPBBUF ; if(RPBBUF != '¥0') {
	JZE RC0
	ST gr5, 0,gr1 ; *gr1 = RPBBUF;
	ST gr0, RPBBUF ; RPBBUF = '¥0'
	JUMP RC3 ; return; }
RC0
	LD gr7, INP ; inp = INP;
	LD gr6, IBUFSIZE ; if(IBUFSIZE == 0) {
	JNZ RC1
	IN IBUF, IBUFSIZE ; IN();
	LD gr7, gr0 ; inp = 0;
; }
RC1
	CPA gr7, IBUFSIZE ; if(inp == IBUFSIZE) {
	JNZ RC2
	LD gr5, NEWLINE ; *gr1 = '¥n';
	ST gr5, 0,gr1
	ST gr0, IBUFSIZE ; IBUFSIZE = INP = 0;
	ST gr0, INP
	JUMP RC3 ; }
RC2 ; else {
	LD gr5, IBUF,gr7 ; *gr1 = *inp++;
	ADDA gr7, ONE
	ST gr5, 0,gr1
	ST gr7, INP ; INP = inp;
RC3 ; }
	RPOP
	RET
READINT
; gr1 が指す番地に整数値一つを読み込む
	RPUSH
RI1 ; do {
	CALL READCHAR ; ch = READCHAR();
	LD gr7, 0,gr1
	CPA gr7, SPACE ; } while(ch==' ' || ch=='¥t' || ch=='¥n');
	JZE RI1
	CPA gr7, TAB
	JZE RI1
	CPA gr7, NEWLINE
	JZE RI1
	LD gr5, ONE ; flag = 1
	CPA gr7, MINUS ; if(ch == '-') {
	JNZ RI4
	LD gr5, gr0 ; flag = 0;
	CALL READCHAR ; ch = READCHAR();
	LD gr7, 0,gr1
RI4 ; }
	LD gr6, gr0 ; v = 0;
RI2
	CPA gr7, ZERO ; while('0' <= ch && ch <= '9') {
	JMI RI3
	CPA gr7, NINE
	JPL RI3
	MULA gr6, TEN ; v = v*10+ch-'0';
	ADDA gr6, gr7
	SUBA gr6, ZERO
	CALL READCHAR ; ch = READSCHAR();
	LD gr7, 0,gr1
	JUMP RI2 ; }
RI3
	ST gr7, RPBBUF ; ReadPushBack();
	ST gr6, 0,gr1 ; *gr1 = v;
	CPA gr5, gr0 ; if(flag == 0) {
	JNZ RI5
	SUBA gr5, gr6 ; *gr1 = -v;
	ST gr5, 0,gr1
RI5 ; }
	RPOP
	RET
READLINE
; 入力を改行コードまで（改行コードも含む）読み飛ばす
	ST gr0, IBUFSIZE
	ST gr0, INP
	ST gr0, RPBBUF
	RET
ONE DC 1
SIX DC 6
TEN DC 10
SPACE DC #0020 ; ' '
MINUS DC #002D ; '-'
TAB DC #0009 ; '¥t'
ZERO DC #0030 ; '0'
NINE DC #0039 ; '9'
NEWLINE DC #000A ; '¥n'
INTBUF DS 8
OBUFSIZE DC 0
IBUFSIZE DC 0
INP DC 0
OBUF DS 257
IBUF DS 257
RPBBUF DC 0
	END
